import { type ElementInterface, type Mapped, type Solid, type ValueItemID } from '../main/types.ts';
import { type InspectorUpdateMap, PropGetterState } from './types.ts';
export declare enum Value_Kind {
    Observed_Getter = 0,
    Value = 1,
    Value_Obj = 2
}
export type Value_Data = {
    kind: Value_Kind.Observed_Getter;
    data: Observed_Getter;
} | {
    kind: Value_Kind.Value;
    value: unknown;
} | {
    kind: Value_Kind.Value_Obj;
    obj: {
        value?: unknown;
    };
};
export type Value_Node = {
    tracked_stores: (() => void)[];
    selected: boolean;
    data: Value_Data;
};
export type Value_Node_Map = Map<ValueItemID, Value_Node>;
/** Prop becomes stale or live (is being currently listened to reactively or not) */
export type On_Prop_State_Change = (key: string, state: PropGetterState) => void;
export type On_Value_Update = (id: ValueItemID) => void;
export type Observed_Props_Map = WeakMap<Solid.Props, Observed_Props>;
/**
 * Manages observing getter properties.
 * This is used to track when a prop is accessed and when it is no longer accessed. (STALE | LIVE)
 */
export type Observed_Props = {
    props: Solid.Props;
    on_prop_state_change?: On_Prop_State_Change | undefined;
    on_value_update?: On_Value_Update | undefined;
    observed_getters: Record<string, Observed_Getter>;
};
export type Observed_Getter = {
    v: unknown | typeof $NOT_SET;
    n: number;
};
export type Inspector_Context<TEl extends object> = {
    value_map: Value_Node_Map;
    config: Collect_Details_Config<TEl>;
};
export type Collect_Details_Config<TEl extends object> = {
    on_prop_state_change: On_Prop_State_Change;
    on_value_update: On_Value_Update;
    props_map: Observed_Props_Map;
    eli: ElementInterface<TEl>;
};
declare const $NOT_SET: unique symbol;
export declare function value_data_get_value(data: Value_Data): unknown;
export declare function value_node_make(data: Value_Data): Value_Node;
export declare function value_node_make_obj(obj: {
    value?: unknown;
}): Value_Node;
export declare function value_node_make_value(value: unknown): Value_Node;
export declare function value_node_make_observed_getter(data: Observed_Getter): Value_Node;
export declare function value_node_add_store_observer(node: Value_Node, unsub: () => void): void;
export declare function value_node_reset(node: Value_Node): void;
export declare function value_node_is_selected(node: Value_Node): boolean;
export declare function value_node_set_selected(node: Value_Node, selected: boolean): void;
export declare function value_node_map_reset(map: Value_Node_Map): void;
export declare function observed_props_make(props: Solid.Props): Observed_Props;
export declare function observed_props_observe_prop(observed: Observed_Props, key: string, id: ValueItemID, get: () => unknown): Observed_Getter;
declare function compare_proxy_prop_keys(old_keys: readonly string[], new_keys: readonly string[]): InspectorUpdateMap['propKeys'] | null;
/**
 * Clear all observers from inspected owner. (value updates, prop updates, etc.)
 * Used to clear observers when the inspected owner is switched.
 */
export declare function clear_owner_observers(owner: Solid.Owner, observed_props_map: Observed_Props_Map): void;
/**
 * Pre-observe component props without gathering data.
 * To get fresh values when the component is later inspected.
 */
export declare function pre_observe_component_props(component: Solid.Component, props_map: Observed_Props_Map): void;
export declare function collect_owner_details<TEl extends object>(owner: Solid.Owner, config: Collect_Details_Config<TEl>): {
    details: Mapped.OwnerDetails;
    value_map: Value_Node_Map;
    check_proxy_props: (() => ReturnType<typeof compare_proxy_prop_keys>) | undefined;
};
export {};
//# sourceMappingURL=inspector.d.ts.map