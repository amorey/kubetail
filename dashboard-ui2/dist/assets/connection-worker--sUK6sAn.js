(function(){"use strict";let o={baseUrl:"",timeout:3e4,retryAttempts:3,retryDelay:1e3};const r=new Map,d=e=>new Promise(s=>setTimeout(s,e)),n=async(e,s=1)=>{const{id:t,method:E,url:c,headers:f={},body:m,timeout:T=o.timeout}=e;try{const a=new AbortController;r.set(t,a);const g=setTimeout(()=>a.abort(),T),R=c.startsWith("http")?c:`${o.baseUrl}${c}`,i=await fetch(R,{method:E,headers:{"Content-Type":"application/json",...f},body:m,signal:a.signal});clearTimeout(g),r.delete(t);const l={};i.headers.forEach((h,w)=>{l[w]=h});const b=await i.text();self.postMessage({type:"HTTP_RESPONSE",id:t,status:i.status,headers:l,body:b})}catch(a){if(r.delete(t),a instanceof Error&&a.name==="AbortError"){self.postMessage({type:"REQUEST_CANCELLED",id:t});return}if(s<(o.retryAttempts||1))return await d(o.retryDelay||1e3),n(e,s+1);self.postMessage({type:"HTTP_ERROR",id:t,error:a instanceof Error?a.message:"Unknown error",status:a instanceof Error&&"status"in a?a.status:void 0})}},p=e=>{const s=r.get(e);s&&(s.abort(),r.delete(e))},u=async e=>{const s=e.map(t=>n(t));await Promise.allSettled(s)},y=e=>{const{type:s}=e.data;switch(s){case"CONFIG":{const{config:t}=e.data;o={...o,...t},self.postMessage({type:"CONFIG_UPDATED"});break}case"HTTP_REQUEST":{const{request:t}=e.data;n(t);break}case"BATCH_REQUESTS":{const{requests:t}=e.data;u(t);break}case"CANCEL_REQUEST":{const{id:t}=e.data;p(t);break}default:self.postMessage({type:"HTTP_ERROR",id:"",error:`Unknown message type: ${e.data.type}`})}};self.addEventListener("message",y)})();
