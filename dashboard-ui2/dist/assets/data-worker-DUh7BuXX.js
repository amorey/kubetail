(function(){"use strict";let a={},l=[];const i=o=>o.lastModifiedAtDate??0,y=(o,c)=>{const s=a[c];if(!s)return o.length;const t=i(s);let e=0,n=o.length;for(;e<n;){const d=e+n>>>1,p=a[o[d]];if(!p){n=d;continue}const r=i(p);t>r||t===r&&c<o[d]?n=d:e=d+1}return e},f=(o=[],c=[])=>{let s=l.slice();if(c.length){const t=new Set(c);s=s.filter(e=>!t.has(e))}if(o.length){const t=new Set;for(const e of o){if(t.has(e)||!a[e])continue;t.add(e);const n=s.indexOf(e);n>=0&&s.splice(n,1);const d=y(s,e);s.splice(d,0,e)}}return s},S=o=>{const{type:c,payload:s}=o.data;try{switch(c){case"INIT":{a={...s};const t=Object.keys(a);t.sort((e,n)=>{const d=a[e],p=a[n],r=i(p),g=i(d);return r!==g?r-g:e<n?-1:e>n?1:0}),l=t,self.postMessage({type:"SORTED_IDS",payload:{ids:t,changes:{upserted:t,deleted:[]}}});break}case"UPSERT":{const t=Object.keys(s);Object.assign(a,s);const e=f(t);l=e,self.postMessage({type:"SORTED_IDS",payload:{ids:e,changes:{upserted:t,deleted:[]}}});break}case"DELETE":{const{ids:t}=s;for(const n of t)delete a[n];const e=f([],t);l=e,self.postMessage({type:"SORTED_IDS",payload:{ids:e,changes:{upserted:[],deleted:t}}});break}case"GET_SORTED_IDS":{self.postMessage({type:"SORTED_IDS",payload:{ids:l,changes:{upserted:[],deleted:[]}}});break}default:self.postMessage({type:"ERROR",payload:{message:`Unknown message type: ${o.data.type}`}})}}catch(t){self.postMessage({type:"ERROR",payload:{message:t instanceof Error?t.message:"Unknown error"}})}};self.addEventListener("message",S)})();
