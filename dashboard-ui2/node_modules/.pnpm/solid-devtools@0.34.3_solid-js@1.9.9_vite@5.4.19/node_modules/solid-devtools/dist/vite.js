import {
  jsxLocationPlugin,
  namePlugin
} from "./chunk-RDZMZMK7.js";

// packages/main/src/vite/vite.ts
import * as path from "node:path";
import "vite";
import { transformAsync } from "@babel/core";
import "@solid-devtools/debugger/types";
import plugin_ts_syntax from "@babel/plugin-syntax-typescript";
var DevtoolsModule = /* @__PURE__ */ ((DevtoolsModule2) => {
  DevtoolsModule2["Main"] = "solid-devtools";
  DevtoolsModule2["Setup"] = "solid-devtools/setup";
  return DevtoolsModule2;
})(DevtoolsModule || {});
function get_extname(filename) {
  filename = path.extname(filename);
  let idx = filename.indexOf("?");
  if (idx === -1)
    idx = filename.length;
  return filename.slice(1, idx);
}
var devtoolsPlugin = (_options = {}) => {
  const options = {
    autoname: _options.autoname ?? false,
    locator: _options.locator ? {
      targetIDE: false,
      jsxLocation: false,
      componentLocation: false,
      ..._options.locator === true ? {} : _options.locator
    } : void 0
    // SDT_DEV: _options.SDT_DEV ?? false,
  };
  const enabled_jsx_location = !!options.locator?.jsxLocation;
  const enabled_component_location = !!options.locator?.componentLocation;
  const jsx_location_plugin_config = enabled_jsx_location || enabled_component_location ? {
    jsx: enabled_jsx_location,
    components: enabled_component_location
  } : null;
  let is_dev = false;
  let project_root = process.cwd();
  return {
    name: "solid-devtools",
    enforce: "pre",
    configResolved(config) {
      project_root = config.root;
      is_dev = config.command === "serve" && config.mode !== "production";
    },
    resolveId(id) {
      if (is_dev && id === "solid-devtools" /* Main */) return "solid-devtools" /* Main */;
    },
    load(id) {
      if (!is_dev || id !== "solid-devtools" /* Main */) return;
      let code = `import "${"solid-devtools/setup" /* Setup */}";`;
      if (options.locator) {
        code += `
import { setLocatorOptions } from "${"solid-devtools/setup" /* Setup */}";
        setLocatorOptions(${JSON.stringify(options.locator)});`;
      }
      return code;
    },
    async transform(source, id, transformOptions) {
      if (transformOptions?.ssr || !is_dev) return;
      const extname2 = get_extname(id);
      if (!["mjs", "cjs", "cts", "mts", "js", "jsx", "ts", "tsx"].includes(extname2)) return;
      const is_jsx = extname2 === "jsx" || extname2 === "tsx";
      const plugins = [];
      if (jsx_location_plugin_config != null && is_jsx) {
        plugins.push(jsxLocationPlugin(jsx_location_plugin_config));
      }
      if (options.autoname) {
        plugins.push(namePlugin);
      }
      if (plugins.length === 0) {
        return { code: source };
      }
      plugins.unshift([plugin_ts_syntax, { isTSX: is_jsx }]);
      const result = await transformAsync(source, {
        babelrc: false,
        configFile: false,
        root: project_root,
        filename: id,
        sourceFileName: id,
        sourceMaps: true,
        plugins
      });
      if (result) {
        return { code: result.code, map: result.map };
      }
    }
  };
};
export {
  DevtoolsModule,
  devtoolsPlugin as default,
  devtoolsPlugin
};
